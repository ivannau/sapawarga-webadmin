stages:
  - versioning
  - code_quality
  - build
  - test
  - release
  - deploy_staging
  - deploy_prod

versioning:
  image: alpine:latest
  stage: versioning
  before_script:
    - apk add git
  script:
    - export VERSION=$CI_BUILD_REF
    - echo $VERSION > version
    - cat version
  artifacts:
    paths:
      - version

code_quality:
  image: docker:stable
  stage: code_quality
  only:
    - merge_requests
    - develop
    - master
  services:
    - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - docker run
        --env SOURCE_CODE=$PWD
        --env CONTAINER_TIMEOUT_SECONDS=3600
        --env CODECLIMATE_DEBUG=1
        --volume $PWD:/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:11-8-stable" /code
  artifacts:
    paths: [gl-code-quality-report.json]
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week

build_image:
  image: docker:20.10.7
  stage: build
  only:
    - develop
  environment:
    name: staging
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  dependencies:
    - versioning
  before_script:
    - export VERSION=$(cat ./version)
    - export COMPOSE_HTTP_TIMEOUT=600
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cp .env-template .env
    - sed -i "s/%NODE_ENV%/production/g" .env
    - sed -i "s/%VUE_APP_BASE_API%/${VUE_APP_BASE_API}/g" .env
    - sed -i "s/%SENTRY_DSN_API%/${SENTRY_DSN_API}/g" .env
    - sed -i "s/%GOOGLE_MAPS_WEB_API_KEY%/${GOOGLE_MAPS_WEB_API_KEY}/g" .env
    - sed -i "s/%VUE_APP_PHONE%/${VUE_APP_PHONE}/g" .env
    - sed -i "s/%VUE_APP_ANALYTICS_ID%/${VUE_APP_ANALYTICS_ID}/g" .env
    - sed -i "s/%VUE_APP_S3_URL%/${VUE_APP_S3_URL}/g" .env
    # firebase credentials
    - sed -i "s/%FIREBASE_API_KEY%/${FIREBASE_API_KEY}/g" .env
    - sed -i "s/%FIREBASE_AUTH_DOMAIN%/${FIREBASE_AUTH_DOMAIN}/g" .env
    - sed -i "s/%FIREBASE_STORAGE_BUCKET%/${FIREBASE_STORAGE_BUCKET}/g" .env
    - sed -i "s/%FIREBASE_DB_URL%/${FIREBASE_DB_URL}/g" .env
    - sed -i "s/%FIREBASE_PROJECT_ID%/${FIREBASE_PROJECT_ID}/g" .env
    - sed -i "s/%FIREBASE_MESSAGING_SENDER_ID%/${FIREBASE_MESSAGING_SENDER_ID}/g" .env
    - sed -i "s/%FIREBASE_APP_ID%/${FIREBASE_APP_ID}/g" .env
    - sed -i "s/%FIREBASE_MEASUREMENT_ID%/${FIREBASE_MEASUREMENT_ID}/g" .env
    - docker build -t $CI_REGISTRY/jdsteam/sapa-warga/sapawarga-webadmin:$VERSION -f backend/Dockerfile .
    - docker push $CI_REGISTRY/jdsteam/sapa-warga/sapawarga-webadmin:$VERSION
    
test_webadmin:
  image: node:12.16-alpine
  stage: test
  only:
    - branches
  dependencies:
    - versioning
  script:
    - apk update && apk add --no-cache git
    - cd backend/ && yarn install && yarn lint && yarn test:unit -u --detectOpenHandles
  artifacts:
     untracked: false
     expire_in: 7 days
     paths:
      - backend/tests/

deploy_staging_jabarcloud:
  image: dtzar/helm-kubectl:3.3.1
  stage: deploy_staging
  only:
    - develop
  dependencies:
    - versioning
  environment:
    name: staging
  before_script:
    - export VERSION=$(cat ./version)
    - echo $kube_config | base64 -d > kubeconfig
    - export KUBECONFIG=./kubeconfig
    - echo $cert_key | base64 -d > client.key
    - kubectl config set-credentials gitlab --client-key=client.key --embed-certs=true
    - kubectl config set-cluster $cluster_name --insecure-skip-tls-verify=true

  script:
    # Copy template samples #
    - cp kubernetes/webadmin-variables-sample.yaml kubernetes/webadmin-variables.yaml
    # Add ENV for apps # VUE_APP_NODE_ENV
    - sed -i "s/%VUE_APP_VERSION%/${VERSION}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%VUE_APP_NODE_ENV%/${VUE_APP_NODE_ENV}/g" kubernetes/webadmin-variables.yaml

    # Vue app base api to staging
    - sed -i "s/%VUE_APP_BASE_API%/${VUE_APP_BASE_API}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%dockerconfigjson%/${dockerconfigjson}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%SENTRY_DSN_API%/${SENTRY_DSN_API}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%APP_ERROR_ENVIRONMENT%/${APP_ERROR_ENVIRONMENT}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%VERSION%/${VERSION}/g" kubernetes/webadmin-deployment-staging.yaml
    - sed -i "s/%VUE_APP_PHONE%/${VUE_APP_PHONE}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%VUE_APP_ANALYTICS_ID%/${VUE_APP_ANALYTICS_ID}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%VUE_APP_S3_URL%/${VUE_APP_S3_URL}/g" kubernetes/webadmin-variables.yaml

    # firebase credentials
    - sed -i "s/%FIREBASE_API_KEY%/${FIREBASE_API_KEY}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_AUTH_DOMAIN%/${FIREBASE_AUTH_DOMAIN}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_STORAGE_BUCKET%/${FIREBASE_STORAGE_BUCKET}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_DB_URL%/${FIREBASE_DB_URL}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_PROJECT_ID%/${FIREBASE_PROJECT_ID}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_MESSAGING_SENDER_ID%/${FIREBASE_MESSAGING_SENDER_ID}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_APP_ID%/${FIREBASE_APP_ID}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_MEASUREMENT_ID%/${FIREBASE_MEASUREMENT_ID}/g" kubernetes/webadmin-variables.yaml

    #- cat kubernetes/webadmin-variables.yaml
    - kubectl create --dry-run=client --validate -f kubernetes/webadmin-variables.yaml
        -f kubernetes/webadmin-deployment-staging.yaml
        -f kubernetes/webadmin-service.yaml # mode development
    - kubectl apply -f kubernetes/webadmin-variables.yaml
        -f kubernetes/webadmin-deployment-staging.yaml
        -f kubernetes/webadmin-service.yaml # mode development


build_image_prod:
  image: docker:20.10.7
  stage: build
  only:
    - master
  environment:
    name: production
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  dependencies:
    - versioning
  before_script:
    - export VERSION=$(cat ./version)
    - export COMPOSE_HTTP_TIMEOUT=600
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cp .env-template .env
    - sed -i "s/%NODE_ENV%/production/g" .env
    - sed -i "s/%VUE_APP_BASE_API%/${VUE_APP_BASE_API}/g" .env
    - sed -i "s/%SENTRY_DSN_API%/${SENTRY_DSN_API}/g" .env
    - sed -i "s/%GOOGLE_MAPS_WEB_API_KEY%/${GOOGLE_MAPS_WEB_API_KEY}/g" .env
    - sed -i "s/%VUE_APP_PHONE%/${VUE_APP_PHONE}/g" .env
    - sed -i "s/%VUE_APP_ANALYTICS_ID%/${VUE_APP_ANALYTICS_ID}/g" .env
    - sed -i "s/%VUE_APP_S3_URL%/${VUE_APP_S3_URL}/g" .env
    # firebase credentials
    - sed -i "s/%FIREBASE_API_KEY%/${FIREBASE_API_KEY}/g" .env
    - sed -i "s/%FIREBASE_AUTH_DOMAIN%/${FIREBASE_AUTH_DOMAIN}/g" .env
    - sed -i "s/%FIREBASE_STORAGE_BUCKET%/${FIREBASE_STORAGE_BUCKET}/g" .env
    - sed -i "s/%FIREBASE_DB_URL%/${FIREBASE_DB_URL}/g" .env
    - sed -i "s/%FIREBASE_PROJECT_ID%/${FIREBASE_PROJECT_ID}/g" .env
    - sed -i "s/%FIREBASE_MESSAGING_SENDER_ID%/${FIREBASE_MESSAGING_SENDER_ID}/g" .env
    - sed -i "s/%FIREBASE_APP_ID%/${FIREBASE_APP_ID}/g" .env
    - sed -i "s/%FIREBASE_MEASUREMENT_ID%/${FIREBASE_MEASUREMENT_ID}/g" .env
    - docker build -t $CI_REGISTRY/jdsteam/sapa-warga/sapawarga-webadmin:$VERSION -f backend/Dockerfile .
    - docker push $CI_REGISTRY/jdsteam/sapa-warga/sapawarga-webadmin:$VERSION


deploy_prod_eks:
  stage: deploy_prod
  image: dtzar/helm-kubectl
  when: manual
  environment:
    name: production
  only:
    - master
  dependencies:
    - versioning
  before_script:
    - export VERSION=$(cat ./version)
    - kubectl config set-cluster k8s --server="${EKS_SERVER_V2}"
    - kubectl config set clusters.k8s.certificate-authority-data ${EKS_CA_V2}
    - kubectl config set-credentials gitlab-eks-admin-development --token="${EKS_TOKEN_V2}"
    - kubectl config set-context default --cluster=k8s --user=gitlab-eks-admin-development
    - kubectl config use-context default
    - kubectl cluster-info
  script:
    - cp kubernetes/webadmin-variables-sample.yaml kubernetes/webadmin-variables.yaml
    - sed -i "s/%VUE_APP_VERSION%/${VERSION}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%VUE_APP_NODE_ENV%/${VUE_APP_NODE_ENV}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%VUE_APP_BASE_API%/${EKS_VUE_APP_BASE_API}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%dockerconfigjson%/${dockerconfigjson}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%SENTRY_DSN_API%/${SENTRY_DSN_API}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%APP_ERROR_ENVIRONMENT%/${APP_ERROR_ENVIRONMENT}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%VERSION%/${VERSION}/g" kubernetes/webadmin-deployment.yaml
    - sed -i "s/%VUE_APP_PHONE%/${VUE_APP_PHONE}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%VUE_APP_ANALYTICS_ID%/${VUE_APP_ANALYTICS_ID}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%VUE_APP_S3_URL%/${VUE_APP_S3_URL}/g" kubernetes/webadmin-variables.yaml

    # firebase credentials
    - sed -i "s/%FIREBASE_API_KEY%/${FIREBASE_API_KEY}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_AUTH_DOMAIN%/${FIREBASE_AUTH_DOMAIN}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_STORAGE_BUCKET%/${FIREBASE_STORAGE_BUCKET}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_DB_URL%/${FIREBASE_DB_URL}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_PROJECT_ID%/${FIREBASE_PROJECT_ID}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_MESSAGING_SENDER_ID%/${FIREBASE_MESSAGING_SENDER_ID}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_APP_ID%/${FIREBASE_APP_ID}/g" kubernetes/webadmin-variables.yaml
    - sed -i "s/%FIREBASE_MEASUREMENT_ID%/${FIREBASE_MEASUREMENT_ID}/g" kubernetes/webadmin-variables.yaml

    - kubectl create --dry-run --validate -f kubernetes/webadmin-variables.yaml
        -f kubernetes/webadmin-deployment.yaml
        -f kubernetes/webadmin-service.yaml
    - kubectl apply -f kubernetes/webadmin-variables.yaml
        -f kubernetes/webadmin-deployment.yaml
        -f kubernetes/webadmin-service.yaml
